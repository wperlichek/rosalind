def get_reverse_complement(dna: str = "") -> str:
    # Crude, string replacement, O(n^2) time complexity, new string each time...
    if dna == "":
        return dna
    else:
        rev_dna = dna[::-1]
        rev_dna_compliment = ""
        for ch in rev_dna:
            if ch == "C":
                rev_dna_compliment += "G"
            elif ch == "G":
                rev_dna_compliment += "C"
            elif ch == "T":
                rev_dna_compliment += "A"
            else:
                rev_dna_compliment += "T"
        return rev_dna_compliment


def get_reverse_compliment_alt(dna: str = "") -> str:
    # Better, idiomatic python
    # O(n) time complexity and more memory efficient
    if dna == "":
        return dna
    else:
        rev_dna = dna[::-1]
        rev_dna = rev_dna.translate(str.maketrans("TAGC", "ATCG"))
        return rev_dna


# 5' AAAACCCGGT 3'
# Reversed: TGGCCCAAAA
# Complemented: ACCGGGTTTT

assert get_reverse_complement(
    "CTCGAAATCAGTGTTTAAGATGGCATTGTCTACTGCGGAAACAAGTTACATGCGATCCCGCTAGTGTAATACAAGAAAGTCAACCCTATCTTGAAGACATCAGCTCCTACGCTCAAGGCATTATATTGCGAGTGCTCTTGGTGAGTTTCCAAGTCGCGCGCATCCTAACAGGAAGACAAAGCCCGTTGTCATGCACCGAATCTGCACCCCCTAGCCTATAAAGACATGACAGGCGTCTATTCTTGACTGCCAACTTGCATGGCGGAAAAGACCCCAGTAGTAAATGTGCGCACTAGAATTCTCAAACGCGGGGGGCCTGGACAGAGTAAAGGTAGGGGTCGTACTTTGCACGCTTGGTATGCAAGCGTGGATTAAGCTGAAACGTTATGACTGCACCTGGATGTGTGTCGATAAAGGATACGTGAGTTGGATTCCGATAATCTACGGCCAAACCTGCTGCGGGGAGGGGCAGCCGCCGGGGCGCCGTAGGTCTCGGGTGGAGTCTTTAGCCTGAGCCATACGATGTTATGCCACGAAGGGATTTCCTTTGTGCAACTTCAAAAAGTTACTCTATGCTTCGAGGAAAATGCACGGCTTGCTGCCGCCTTCTCTTACCCGCATAGGCACGGGATACAGAAAGGCTCCCAGGTGTTTATATCACCGGATTGAATGATGCAACAGTTCCTGTTTTTCTAGGATAAGCATCGCCACCCTAACGGGAACCGGCGCCTGATCCGCGAACCTTCAACCAATTGAGGAATTACAATTACAGCGCGGAGGGAATCGCTGCGTCTAGTGTCCCGGTTATCTGCGTATGCGTTGATTGAAGTGGGAGCCC"
) == get_reverse_compliment_alt(
    "CTCGAAATCAGTGTTTAAGATGGCATTGTCTACTGCGGAAACAAGTTACATGCGATCCCGCTAGTGTAATACAAGAAAGTCAACCCTATCTTGAAGACATCAGCTCCTACGCTCAAGGCATTATATTGCGAGTGCTCTTGGTGAGTTTCCAAGTCGCGCGCATCCTAACAGGAAGACAAAGCCCGTTGTCATGCACCGAATCTGCACCCCCTAGCCTATAAAGACATGACAGGCGTCTATTCTTGACTGCCAACTTGCATGGCGGAAAAGACCCCAGTAGTAAATGTGCGCACTAGAATTCTCAAACGCGGGGGGCCTGGACAGAGTAAAGGTAGGGGTCGTACTTTGCACGCTTGGTATGCAAGCGTGGATTAAGCTGAAACGTTATGACTGCACCTGGATGTGTGTCGATAAAGGATACGTGAGTTGGATTCCGATAATCTACGGCCAAACCTGCTGCGGGGAGGGGCAGCCGCCGGGGCGCCGTAGGTCTCGGGTGGAGTCTTTAGCCTGAGCCATACGATGTTATGCCACGAAGGGATTTCCTTTGTGCAACTTCAAAAAGTTACTCTATGCTTCGAGGAAAATGCACGGCTTGCTGCCGCCTTCTCTTACCCGCATAGGCACGGGATACAGAAAGGCTCCCAGGTGTTTATATCACCGGATTGAATGATGCAACAGTTCCTGTTTTTCTAGGATAAGCATCGCCACCCTAACGGGAACCGGCGCCTGATCCGCGAACCTTCAACCAATTGAGGAATTACAATTACAGCGCGGAGGGAATCGCTGCGTCTAGTGTCCCGGTTATCTGCGTATGCGTTGATTGAAGTGGGAGCCC"
)
print(
    get_reverse_compliment_alt(
        "CTCGAAATCAGTGTTTAAGATGGCATTGTCTACTGCGGAAACAAGTTACATGCGATCCCGCTAGTGTAATACAAGAAAGTCAACCCTATCTTGAAGACATCAGCTCCTACGCTCAAGGCATTATATTGCGAGTGCTCTTGGTGAGTTTCCAAGTCGCGCGCATCCTAACAGGAAGACAAAGCCCGTTGTCATGCACCGAATCTGCACCCCCTAGCCTATAAAGACATGACAGGCGTCTATTCTTGACTGCCAACTTGCATGGCGGAAAAGACCCCAGTAGTAAATGTGCGCACTAGAATTCTCAAACGCGGGGGGCCTGGACAGAGTAAAGGTAGGGGTCGTACTTTGCACGCTTGGTATGCAAGCGTGGATTAAGCTGAAACGTTATGACTGCACCTGGATGTGTGTCGATAAAGGATACGTGAGTTGGATTCCGATAATCTACGGCCAAACCTGCTGCGGGGAGGGGCAGCCGCCGGGGCGCCGTAGGTCTCGGGTGGAGTCTTTAGCCTGAGCCATACGATGTTATGCCACGAAGGGATTTCCTTTGTGCAACTTCAAAAAGTTACTCTATGCTTCGAGGAAAATGCACGGCTTGCTGCCGCCTTCTCTTACCCGCATAGGCACGGGATACAGAAAGGCTCCCAGGTGTTTATATCACCGGATTGAATGATGCAACAGTTCCTGTTTTTCTAGGATAAGCATCGCCACCCTAACGGGAACCGGCGCCTGATCCGCGAACCTTCAACCAATTGAGGAATTACAATTACAGCGCGGAGGGAATCGCTGCGTCTAGTGTCCCGGTTATCTGCGTATGCGTTGATTGAAGTGGGAGCCC"
    )
)
